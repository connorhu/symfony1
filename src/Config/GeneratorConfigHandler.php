<?php

namespace Symfony1\Components\Config;

use Symfony1\Components\Exception\ConfigurationException;
use Symfony1\Components\Exception\ParseException;
use Symfony1\Components\Exception\InitializationException;
use Symfony1\Components\Generator\GeneratorManager;
use Symfony1\Components\Util\Context;
use function sprintf;
use function preg_match;
use function str_replace;
use function date;
/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
/**
 * sfGeneratorConfigHandler.
 *
 * @author Fabien Potencier <fabien.potencier@symfony-project.com>
 *
 * @version SVN: $Id$
 */
class GeneratorConfigHandler extends YamlConfigHandler
{
    /**
     * Executes this configuration handler.
     *
     * @param array $configFiles An array of absolute filesystem path to a configuration file
     *
     * @return string Data to be written to a cache file
     *
     * @throws ConfigurationException If a requested configuration file does not exist or is not readable
     * @throws ParseException If a requested configuration file is improperly formatted
     * @throws InitializationException If a generator.yml key check fails
     */
    public function execute($configFiles)
    {
        // parse the yaml
        $config = static::getConfiguration($configFiles);
        if (!$config) {
            return '';
        }
        if (!isset($config['generator'])) {
            throw new ParseException(sprintf('Configuration file "%s" must specify a generator section.', isset($configFiles[1]) ? $configFiles[1] : $configFiles[0]));
        }
        $config = $config['generator'];
        if (!isset($config['class'])) {
            throw new ParseException(sprintf('Configuration file "%s" must specify a generator class section under the generator section.', isset($configFiles[1]) ? $configFiles[1] : $configFiles[0]));
        }
        foreach (array('fields', 'list', 'edit') as $section) {
            if (isset($config[$section])) {
                throw new ParseException(sprintf('Configuration file "%s" can specify a "%s" section but only under the param section.', isset($configFiles[1]) ? $configFiles[1] : $configFiles[0], $section));
            }
        }
        // generate class and add a reference to it
        $generatorManager = new GeneratorManager(Context::getInstance()->getConfiguration());
        // generator parameters
        $generatorParam = isset($config['param']) ? $config['param'] : array();
        // hack to find the module name (look for the last /modules/ in path)
        preg_match('#.*/modules/([^/]+)/#', str_replace('\\', '/', $configFiles[0]), $match);
        $generatorParam['moduleName'] = $match[1];
        // compile data
        $retval = "<?php\n" . "// auto-generated by sfGeneratorConfigHandler\n" . "// date: %s\n%s\n";
        $retval = sprintf($retval, date('Y/m/d H:i:s'), static::getContent($generatorManager, $config['class'], $generatorParam));
        return $retval;
    }
    public static function getContent(GeneratorManager $generatorManager, $class, $parameters)
    {
        return $generatorManager->generate($class, $parameters);
    }
    /**
     * @see sfConfigHandler
     */
    public static function getConfiguration(array $configFiles)
    {
        return static::parseYamls($configFiles);
    }
}
class_alias(GeneratorConfigHandler::class, 'sfGeneratorConfigHandler', false);