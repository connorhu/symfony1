<?php

namespace Symfony1\Components\Config;

use Symfony1\Components\Service\ServiceContainerBuilder;
use Symfony1\Components\Service\ServiceContainerLoaderArray;
use Symfony1\Components\Service\ServiceContainerDumperPhp;
use function sprintf;
use function date;
/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
/**
 * sfSecurityConfigHandler allows you to configure action security.
 *
 * @author Jerome Tamarelle <jtamarelle@groupe-exp.com>
 *
 * @version SVN: $Id$
 */
class ServiceConfigHandler extends YamlConfigHandler
{
    /**
     * Executes this configuration handler.
     *
     * @param array $configFiles An array of absolute filesystem path to a configuration file
     *
     * @return string Data to be written to a cache file
     */
    public function execute($configFiles)
    {
        $class = Config::get('sf_app') . '_' . Config::get('sf_environment') . 'ServiceContainer';
        $serviceContainerBuilder = new ServiceContainerBuilder();
        $loader = new ServiceContainerLoaderArray($serviceContainerBuilder);
        $loader->load(static::getConfiguration($configFiles));
        $dumper = new ServiceContainerDumperPhp($serviceContainerBuilder);
        $code = $dumper->dump(array('class' => $class, 'base_class' => $this->parameterHolder->get('base_class')));
        // compile data
        $retval = sprintf("<?php\n" . "// auto-generated by sfServiceConfigHandler\n" . "// date: %s\n\n" . "\$class = '%s';\n" . "if (!class_exists(\$class, false)) {\n" . "%s\n" . "}\n" . "return \$class;\n\n", date('Y/m/d H:i:s'), $class, $code);
        return $retval;
    }
    /**
     * @see sfConfigHandler
     */
    public static function getConfiguration(array $configFiles)
    {
        $config = static::parseYamls($configFiles);
        $config = static::flattenConfigurationWithEnvironment($config);
        return $config;
    }
}
class_alias(ServiceConfigHandler::class, 'sfServiceConfigHandler', false);